const mongoose = require("mongoose");
const {
  Content,
  Note,
  Article,
  YoutubeLink,
} = require("../models/ContentModel");
const {
  geminiSubmoduleArticleFetcher,
  geminiSubmoduleVideoFetcher,
} = require("../geminiAPI/geminiSubmoduleContentFetcher");
const {
  youtubeLinksDummy,
  articlesDummy,
} = require("../dummyData/dummyContent");

const withTransaction = require("../utils/withTransaction");

// POST : Generate videos from gemini ? / Dummy Data
const generateArticles = withTransaction(async (req, res, session) => {
  const { contentId, skillName, moduleName, submoduleName, useAI } = req.body;

  // Get content doc
  const contentDoc = await Content.findById(contentId).session(session);
  if (!contentDoc) {
    console.log("Article Generation Failed: Parent Content not found");
    return res.status(404).json({
      message: "Article generation failed: Parent Content not found.",
    });
  }

  // Authenticate user
  if (contentDoc.userId.toString() !== req.user._id.toString()) {
    console.log("Article Generation Failed: Unauthorized user");
    return res.status(401).json({
      message: "Cannot generate articles: Unauthorized user.",
    });
  }

  // Fetch articles
  const fetchedArticles = useAI
    ? await geminiSubmoduleArticleFetcher(skillName, moduleName, submoduleName)
    : articlesDummy;

  if (!fetchedArticles || fetchedArticles.length === 0) {
    return res
      .status(200)
      .json({ message: "No articles generated by AI", data: [] });
  }

  // Save articles
  const articleDocs = await Article.insertMany(
    fetchedArticles.map((article) => ({
      title: article.title,
      link: article.link,
      summary: article.summary,
    })),
    { session }
  );

  // Link to content
  contentDoc.articles.push(...articleDocs.map((a) => a._id));
  await contentDoc.save({ session });

  return res.status(200).json({
    message: "Article generation successful",
    data: articleDocs,
  });
});

// POST : Generate videos from gemini ? / Dummy Data
const generateVideos = withTransaction(async (req, res, session) => {
  const { contentId, skillName, moduleName, submoduleName, useAI } = req.body;

  // Get content doc
  const contentDoc = await Content.findById(contentId).session(session);
  if (!contentDoc) {
    console.log("Video Generation Failed: Parent Content not found");
    return res.status(404).json({
      message: "Video generation failed: Parent Content not found.",
    });
  }

  // Authenticate user
  if (contentDoc.userId.toString() !== req.user._id.toString()) {
    console.log("Video Generation Failed: Unauthorized user");
    return res.status(401).json({
      message: "Cannot generate videos: Unauthorized user.",
    });
  }

  // Fetch videos
  const fetchedVideos = useAI
    ? await geminiSubmoduleVideoFetcher(skillName, moduleName, submoduleName)
    : youtubeLinksDummy;

  if (!fetchedVideos || fetchedVideos.length === 0) {
    return res.status(200).json({ message: "No videos generated", data: [] });
  }

  // Save each fetched video as a YoutubeLink document
  const videoDocs = await YoutubeLink.insertMany(
    fetchedVideos.map((video) => ({
      title: video.title,
      link: video.link,
      userId: req.user._id,
    })),
    { session }
  );

  // Add their IDs to the content document
  contentDoc.youtubeLinks.push(...videoDocs.map((v) => v._id));
  await contentDoc.save({ session });

  // Return the saved documents in the response
  return res.status(200).json({
    message: "Video generation successful",
    data: videoDocs,
  });
});

// GET: Content Articles of a Submodule
const getContentArticles = async (req, res) => {
  try {
    const contentId = req.params.contentId;

    const contentDoc = await Content.findById(contentId);
    if (!contentDoc) {
      return res.status(404).json({
        message: "Content with given Id not found",
      });
    }

    if (contentDoc.userId.toString() !== req.user._id.toString()) {
      return res.status(401).json({
        message: "Unauthorized user",
      });
    }

    await contentDoc.populate("articles");
    const contentArticles = contentDoc.articles;
    console.log("Sent Articles : ", contentArticles);
    return res.status(200).json(contentArticles);
  } catch (error) {
    console.error(error);
    return res.status(500).json({
      message: "Failed to fetch content articles",
    });
  }
};

// GET: Content Videos of a Submodule
const getContentVideos = async (req, res) => {
  try {
    const contentId = req.params.contentId;

    const contentDoc = await Content.findById(contentId);
    if (!contentDoc) {
      return res.status(404).json({
        message: "Content with given Id not found",
      });
    }

    if (contentDoc.userId.toString() !== req.user._id.toString()) {
      return res.status(401).json({
        message: "Unauthorized user",
      });
    }

    await contentDoc.populate("youtubeLinks");
    const contentVideos = contentDoc.youtubeLinks;
    console.log("Sent Videos : ", contentVideos);
    return res.status(200).json(contentVideos);
  } catch (error) {
    console.error(error);
    return res.status(500).json({
      message: "Failed to fetch content videos",
    });
  }
};

// GET: Content Notes for a Submodule:
const getContentNotes = async (req, res) => {
  try {
    const contentId = req.params.contentId;

    const contentDoc = await Content.findById(contentId);

    if (!contentDoc) {
      return res.status(404).json({
        message: "Content with given Id not found",
      });
    }

    if (contentDoc.userId.toString() !== req.user._id.toString()) {
      return res.status(401).json({
        message: "Unauthorized user",
      });
    }

    await contentDoc.populate("notes");
    const contentNotes = contentDoc.notes;
    console.log("Sent Notes : ", contentNotes);
    return res.status(200).json(contentNotes);
  } catch (error) {
    console.error(error);
    return res.status(500).json({
      message: "Failed to fetch content notes",
    });
  }
};

// POST: Create New Note;
const createNote = async (req, res) => {
  try {
    const { title, noteContent, userId, skillId, moduleId, submoduleId, contentId } = req.body;

    if (userId.toString() !== req.user._id.toString()) {
      return res.status(401).json({ message: "Unauthorized user" });
    }

    // 1. Create the new Note document
    const newNoteDoc = await Note.create({
      title,
      content: noteContent,
      userId,
      skillId,
      moduleId,
      submoduleId,
    });

    console.log("New Note Created : ", newNoteDoc);

    // 2. Find the Content document and push the new note's ID to its notes array
    const updatedContentDoc = await Content.findByIdAndUpdate(
      contentId,
      { $push: { notes: newNoteDoc._id } },
      { new: true } // This returns the updated document
    );

    if (!updatedContentDoc) {
      console.error("Content document not found. Note created but not linked.");
      // Optional: Handle this case by deleting the new note to prevent orphans
      await Note.findByIdAndDelete(newNoteDoc._id);
      return res.status(404).json({ message: "Content not found, note creation failed." });
    }

    return res.status(201).json(newNoteDoc);
  } catch (error) {
    console.error(error);
    return res.status(500).json({ message: "Failed to create new note" });
  }
};

// PUT : UPDATE A NOTE.
const updateNote = async (req, res) => {
  try {
    const { noteId } = req.params;
    const { title, content } = req.body;

    // Optional: Check if the user is authorized to update this note
    const note = await Note.findById(noteId);
    if (!note) {
      return res.status(404).json({ message: "Note not found" });
    }
    if (note.userId.toString() !== req.user._id.toString()) {
      return res.status(401).json({ message: "Unauthorized user" });
    }

    const updatedNote = await Note.findByIdAndUpdate(
      noteId,
      { title, content },
      { new: true, runValidators: true } // `new: true` returns the updated document
    );

    return res.status(200).json(updatedNote);
  } catch (error) {
    console.error(error);
    return res.status(500).json({ message: "Failed to update note" });
  }
};

// DELETE: Delete a Note: 
const deleteNote = async (req, res) => {
  try {
    const { noteId } = req.params;

    // Find the note to get its contentId for cleanup
    const noteToDelete = await Note.findById(noteId);
    if (!noteToDelete) {
      return res.status(404).json({ message: "Note not found" });
    }

    if (noteToDelete.userId.toString() !== req.user._id.toString()) {
      return res.status(401).json({ message: "Unauthorized user" });
    }

    // Remove the note's ID from the corresponding Content document
    await Content.findByIdAndUpdate(noteToDelete.submoduleId, {
      $pull: { notes: noteId },
    });

    // Delete the note itself
    await Note.findByIdAndDelete(noteId);

    return res.status(200).json({ message: "Note deleted successfully" });
  } catch (error) {
    console.error(error);
    return res.status(500).json({ message: "Failed to delete note" });
  }
};

module.exports = {
  generateArticles,
  generateVideos,
  getContentArticles,
  getContentVideos,
  createNote,
  getContentNotes, 
  updateNote,
  deleteNote
};
